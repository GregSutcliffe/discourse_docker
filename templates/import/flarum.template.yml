# This template installs MariaDB and all dependencies needed for importing from flarum.

params:
  home: /var/www/discourse

hooks:
  after_web_config:
    - exec:
        cd: /etc/service
        cmd:
          - rm -R unicorn
          - rm -R nginx
          - rm -R cron

    - exec:
        cd: /etc/runit/3.d
        cmd:
          - rm 01-nginx
          - rm 02-unicorn

    - file:
        path: /etc/mysql/conf.d/import.cnf
        contents: |
          [mysqld]
          # disable InnoDB since it is extremely slow in Docker container
          default-storage-engine=MyISAM
          default-tmp-storage-engine=MyISAM
          innodb=OFF
          sql_mode=NO_AUTO_CREATE_USER

          datadir=/shared/import/mysql/data

          skip-host-cache
          skip-name-resolve

    - exec:
        cmd:
          - mkdir -p /shared/import/mysql/data
          - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y nano libmariadb-dev mariadb-server
          - sed -Ei 's/^log/#&/' /etc/mysql/my.cnf

    - file:
        path: /etc/service/mysql/run
        chmod: "+x"
        contents: |
          #!/bin/bash
          cd /
          umask 077

          # Make sure the datadir exists, is accessible and contains all system tables
          mkdir -p /shared/import/mysql/data
          chown mysql -R /shared/import/mysql/data
          /usr/bin/mysql_install_db --user=mysql

          # Shamelessly copied from http://smarden.org/runit1/runscripts.html#mysql
          MYSQLADMIN='/usr/bin/mysqladmin --defaults-extra-file=/etc/mysql/debian.cnf'
          trap "$MYSQLADMIN shutdown" 0
          trap 'exit 2' 1 2 3 15
          /usr/bin/mysqld_safe & wait

    - file:
        path: /etc/runit/3.d/99-mysql
        chmod: "+x"
        contents: |
          #!/bin/bash
          sv stop mysql

    - file:
        path: /usr/local/bin/import_flarum.sh
        chmod: "+x"
        contents: |
          #!/bin/bash
          set -e

          chown discourse -R /shared/import/data

          # Set import user
          mysql -uroot -e "CREATE USER 'discourse'@'localhost' IDENTIFIED BY 'discoursepw';"
          mysql -uroot -e "GRANT ALL PRIVILEGES ON *.* TO 'discourse'@'localhost';"
          mysql -uroot -e "FLUSH PRIVILEGES"

          if [ -f "/shared/import/data/flarum_mysql.sql" ]; then
            if [ -f "/shared/import/mysql/imported" ] && ! sha256sum --check /shared/import/mysql/imported &>/dev/null ; then
              echo "Checksum of database dump changed..."
              rm /shared/import/mysql/imported
            fi

            if [ ! -f "/shared/import/mysql/imported" ]; then
              echo "Loading database dump into MySQL..."
              mysql -uroot -e "DROP DATABASE IF EXISTS flarum"
              mysql -uroot -e "CREATE DATABASE flarum"
              mysql -uroot --default-character-set=utf8 --database=flarum < /shared/import/data/flarum_mysql.sql
              sha256sum /shared/import/data/flarum_mysql.sql > /shared/import/mysql/imported
            fi
          else
            sv stop mysql
          fi

          cd $home
          echo "MySQL ready. Execute this to perform the import:"
          echo "cp /shared/import/data/flarum_import.rb script/import_scripts/flarum_import.rb"
          echo "source /usr/local/bin/set_flarum_vars.sh"
          echo "su discourse -c 'bundle exec ruby script/import_scripts/flarum_import.rb"

    - file:
        path: /usr/local/bin/set_flarum_vars.sh
        contents: |
          export FLARUM_HOST='localhost'
          export FLARUM_USER='discourse'
          export FLARUM_PW='discoursepw'
          export FLARUM_DB='flarum'
          export ATTACHMENTS_BASE_DIR='/shared/import/data/import_uploads'

    - exec:
        cd: $home
        cmd:
          - mkdir -p /shared/import/data
          - chown discourse -R /shared/import

  after_bundle_exec:
    - exec:
        cd: $home
        cmd:
          - echo "gem 'mysql2'" >> Gemfile
          - echo "gem 'ruby-bbcode-to-md', :github => 'nlalonde/ruby-bbcode-to-md'" >> Gemfile
          - su discourse -c 'bundle config unset deployment'
          - su discourse -c 'bundle install --no-deployment --path vendor/bundle --jobs 4 --without test development'
